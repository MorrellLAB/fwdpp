var searchData=
[
  ['s',['s',['../d1/d7f/structKTfwd_1_1mutation.html#a9a7e60b11eec95550d7fb26ad8d69b28',1,'KTfwd::mutation::s()'],['../dc/dcc/structKTfwd_1_1popgenmut.html#ae055d7d981b19117c04def0dcc57e310',1,'KTfwd::popgenmut::s()'],['../de/d4d/structmutation__with__age.html#a85f3c3c62fb469e3e38e5a5b3ec2d5dc',1,'mutation_with_age::s()']]],
  ['same_5fpos',['same_pos',['../da/d8f/structKTfwd_1_1same__pos.html',1,'KTfwd']]],
  ['sample_5fdiploid',['sample_diploid',['../da/d8b/namespaceKTfwd.html#a946efaa4a6095f4f2aadda44a809a477',1,'KTfwd::sample_diploid(gsl_rng *r, vector_type&lt; gamete_type, vector_type_allocator &gt; *gametes, const unsigned &amp;twoN, const diploid_fitness_function &amp;ff, const mutation_removal_policy &amp;mp, const double &amp;f=0.)'],['../da/d8b/namespaceKTfwd.html#a04a19140f729a493851685202d73c606',1,'KTfwd::sample_diploid(gsl_rng *r, vector_type&lt; gamete_type, vector_type_allocator &gt; *gametes, const unsigned &amp;twoN_curr, const unsigned &amp;twoN_next, const diploid_fitness_function &amp;ff, const mutation_removal_policy &amp;mp, const double &amp;f)'],['../da/d8b/namespaceKTfwd.html#ad49f95a9fb81ad6e735437d956f59ddb',1,'KTfwd::sample_diploid(gsl_rng *r, vector_type2&lt; vector_type1&lt; gamete_type, vector_type_allocator1 &gt;, vector_type_allocator2 &gt; *metapop, const unsigned *twoNs, const unsigned &amp;metapopsize, const diploid_fitness_function_container &amp;ffs, const mutation_removal_policy &amp;mp)'],['../da/d8b/namespaceKTfwd.html#a5647d600600d1e7c8254714c1b35d47f',1,'KTfwd::sample_diploid(gsl_rng *r, vector_type2&lt; vector_type1&lt; gamete_type, vector_type_allocator1 &gt;, vector_type_allocator2 &gt; *metapop, const unsigned *twoNs, const unsigned *twoNs_next, const unsigned &amp;metapopsize, const diploid_fitness_function_container &amp;ffs, const mutation_removal_policy &amp;mp)'],['../da/d8b/namespaceKTfwd.html#aa30567b5fe3c278ae72a9caaa744aaa2',1,'KTfwd::sample_diploid(gsl_rng *r, vector_type2&lt; vector_type1&lt; gamete_type, vector_type_allocator1 &gt;, vector_type_allocator2 &gt; *metapop, const unsigned *twoNs, const unsigned &amp;metapopsize, const diploid_fitness_function_container &amp;ffs, const mutation_removal_policy &amp;mp, const double *fs)'],['../da/d8b/namespaceKTfwd.html#adc37b4ba70df5adbced155f80d656029',1,'KTfwd::sample_diploid(gsl_rng *r, vector_type2&lt; vector_type1&lt; gamete_type, vector_type_allocator1 &gt;, vector_type_allocator2 &gt; *metapop, const unsigned *twoNs, const unsigned *twoNs_next, const unsigned &amp;metapopsize, const diploid_fitness_function_container &amp;ffs, const mutation_removal_policy &amp;mp, const double *fs)'],['../da/d8b/namespaceKTfwd.html#a761a0438d183384e5e8b49e89121d21e',1,'KTfwd::sample_diploid(gsl_rng *r, gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt; *gametes, diploid_vector_type&lt; std::pair&lt; typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator, typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator &gt;, diploid_vector_type_allocator &gt; *diploids, mutation_list_type&lt; typename gamete_type::mutation_type, mutation_list_type_allocator &gt; *mutations, const unsigned &amp;N_curr, const double &amp;mu, const mutation_model &amp;mmodel, const recombination_policy &amp;rec_pol, const mutation_insertion_policy &amp;mpolicy, const gamete_insertion_policy &amp;gpolicy_mut, const diploid_fitness_function &amp;ff, const mutation_removal_policy &amp;mp, const double &amp;f=0)'],['../da/d8b/namespaceKTfwd.html#a225d8aeed18091cd7ced5890f56afe52',1,'KTfwd::sample_diploid(gsl_rng *r, gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt; *gametes, diploid_vector_type&lt; std::pair&lt; typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator, typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator &gt;, diploid_vector_type_allocator &gt; *diploids, mutation_list_type&lt; typename gamete_type::mutation_type, mutation_list_type_allocator &gt; *mutations, const unsigned &amp;N_curr, const unsigned &amp;N_next, const double &amp;mu, const mutation_model &amp;mmodel, const recombination_policy &amp;rec_pol, const mutation_insertion_policy &amp;mpolicy, const gamete_insertion_policy &amp;gpolicy_mut, const diploid_fitness_function &amp;ff, const mutation_removal_policy &amp;mp, const double &amp;f=0)'],['../da/d8b/namespaceKTfwd.html#aaf1d8fa7c50cd8dadcceef879b13a2c5',1,'KTfwd::sample_diploid(gsl_rng *r, metapop_gamete_vector_type&lt; gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;, metapop_gamete_vector_type_allocator &gt; *metapop, metapop_diploid_vector_type&lt; diploid_vector_type&lt; std::pair&lt; typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator, typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator &gt;, diploid_vector_type_allocator &gt;, metapop_diploid_vector_type_allocator &gt; *diploids, mutation_list_type&lt; typename gamete_type::mutation_type, mutation_list_type_allocator &gt; *mutations, const unsigned *N_curr, const double &amp;mu, const mutation_model &amp;mmodel, const recombination_policy &amp;rec_pol, const mutation_insertion_policy &amp;mpolicy, const gamete_insertion_policy &amp;gpolicy_mut, const diploid_fitness_function_container &amp;ffs, const mutation_removal_policy &amp;mp, const migration_policy &amp;mig, const double *f=NULL)'],['../da/d8b/namespaceKTfwd.html#a9d97cd41a47a5e01dd034b94e16f49f2',1,'KTfwd::sample_diploid(gsl_rng *r, metapop_gamete_vector_type&lt; gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;, metapop_gamete_vector_type_allocator &gt; *metapop, metapop_diploid_vector_type&lt; diploid_vector_type&lt; std::pair&lt; typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator, typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator &gt;, diploid_vector_type_allocator &gt;, metapop_diploid_vector_type_allocator &gt; *diploids, mutation_list_type&lt; typename gamete_type::mutation_type, mutation_list_type_allocator &gt; *mutations, const unsigned *N_curr, const unsigned *N_next, const double &amp;mu, const mutation_model &amp;mmodel, const recombination_policy &amp;rec_pol, const mutation_insertion_policy &amp;mpolicy, const gamete_insertion_policy &amp;gpolicy_mut, const diploid_fitness_function_container &amp;ffs, const mutation_removal_policy &amp;mp, const migration_policy &amp;mig, const double *f=NULL)'],['../da/d8b/namespaceKTfwd.html#ade94ef65f07d1e664a19f20d2582728d',1,'KTfwd::sample_diploid(gsl_rng *r, glist_vector_type&lt; gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;, glist_vector_type_allocator &gt; *gametes, diploid_vector_type&lt; locus_vector_type&lt; std::pair&lt; typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator, typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator &gt;, locus_vector_type_allocator &gt;, diploid_vector_type_allocator &gt; *diploids, mutation_list_type&lt; typename gamete_type::mutation_type, mutation_list_type_allocator &gt; *mutations, const unsigned &amp;N_curr, const unsigned &amp;N_next, const double *mu, const mutation_model_container &amp;mmodel, const recombination_policy_container &amp;rec_policies, const double *r_between_loci, const mutation_insertion_policy &amp;mpolicy, const gamete_insertion_policy &amp;gpolicy_mut, const diploid_fitness_function &amp;ff, const mutation_removal_policy &amp;mp, const double &amp;f)'],['../da/d8b/namespaceKTfwd.html#aaa6b4b4c12ce030e4bd1f32a0cd95b3c',1,'KTfwd::sample_diploid(gsl_rng *r, glist_vector_type&lt; gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;, glist_vector_type_allocator &gt; *gametes, diploid_vector_type&lt; locus_vector_type&lt; std::pair&lt; typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator, typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator &gt;, locus_vector_type_allocator &gt;, diploid_vector_type_allocator &gt; *diploids, mutation_list_type&lt; typename gamete_type::mutation_type, mutation_list_type_allocator &gt; *mutations, const unsigned &amp;N, const double *mu, const mutation_model_container &amp;mmodel, const recombination_policy_container &amp;rec_policies, const double *r_between_loci, const mutation_insertion_policy &amp;mpolicy, const gamete_insertion_policy &amp;gpolicy_mut, const diploid_fitness_function &amp;ff, const mutation_removal_policy &amp;mp, const double &amp;f)']]],
  ['sample_5fsfs',['sample_sfs',['../da/d8b/namespaceKTfwd.html#a9d9d58d1446e2d4a5aae1e5c4e7ba946',1,'KTfwd']]],
  ['sampling_5ffunctions_2ehpp',['sampling_functions.hpp',['../dd/d0a/sampling__functions_8hpp.html',1,'']]],
  ['scalar_5freader',['scalar_reader',['../df/d63/structKTfwd_1_1fwdpp__internal_1_1scalar__reader.html',1,'KTfwd::fwdpp_internal']]],
  ['serialization_2ehpp',['serialization.hpp',['../d8/d21/serialization_8hpp.html',1,'']]],
  ['serialization_2emd',['serialization.md',['../db/d67/serialization_8md.html',1,'']]],
  ['serialize',['serialize',['../d0/d8e/structKTfwd_1_1serialize.html',1,'KTfwd']]],
  ['setup1',['setup1',['../d9/d1d/mlocusCrossoverTest_8cc.html#a52ed2176e17b75d6e31dcc9bdd41de78',1,'mlocusCrossoverTest.cc']]],
  ['setup2',['setup2',['../d9/d1d/mlocusCrossoverTest_8cc.html#a9568faa7157dd456dd1fead0e071ec12',1,'mlocusCrossoverTest.cc']]],
  ['sigmu',['sigmu',['../dc/d70/structHOChap.html#af1e24ad6df238c3af6775fde5b9c6d40',1,'HOChap']]],
  ['simple_5fgaussian',['simple_gaussian',['../d5/d77/HOC__ind_8cc.html#a25b24674eef2892e7f54af399c90de3b',1,'HOC_ind.cc']]],
  ['single',['SINGLE',['../de/d6e/group__sugar.html#gga6900fb51d7d4e8e89c6ce5f527eb3dada0679273e201afd0bf57af3961f8a23b8',1,'KTfwd::sugar']]],
  ['singlepop',['singlepop',['../d5/d74/classKTfwd_1_1sugar_1_1singlepop.html',1,'KTfwd::sugar']]],
  ['singlepop',['singlepop',['../d5/d74/classKTfwd_1_1sugar_1_1singlepop.html#a0aff017a540292e89c8c46b04714a001',1,'KTfwd::sugar::singlepop::singlepop(const unsigned &amp;popsize)'],['../d5/d74/classKTfwd_1_1sugar_1_1singlepop.html#ad5ceee626ccca760c35bf4163cd2597b',1,'KTfwd::sugar::singlepop::singlepop(singlepop &amp;)=delete'],['../d5/d74/classKTfwd_1_1sugar_1_1singlepop.html#af6cf145e08886d0a09cf3a4ebcdaf04d',1,'KTfwd::sugar::singlepop::singlepop(const singlepop &amp;)=delete'],['../d5/d74/classKTfwd_1_1sugar_1_1singlepop.html#a12256a30e7082e1058c2fdffbeb3f0c2',1,'KTfwd::sugar::singlepop::singlepop(singlepop &amp;&amp;)=default'],['../de/d6e/group__sugar.html#ga15d43cd721988454f6b3b2d96cbea631',1,'KTfwd::singlepop()']]],
  ['singlepop_2ehpp',['singlepop.hpp',['../d5/dd9/singlepop_8hpp.html',1,'']]],
  ['singlepop_2ehpp',['singlepop.hpp',['../d0/d82/singlepop_2singlepop_8hpp.html',1,'']]],
  ['singlepop_5fserialized',['singlepop_serialized',['../d9/dee/classKTfwd_1_1sugar_1_1singlepop__serialized.html#a946c8e33db55f7cb44dc6a08948a0277',1,'KTfwd::sugar::singlepop_serialized::singlepop_serialized(const unsigned &amp;popsize)'],['../d9/dee/classKTfwd_1_1sugar_1_1singlepop__serialized.html#a953637d2eb5941f2efda5e210248558a',1,'KTfwd::sugar::singlepop_serialized::singlepop_serialized(const singlepop_serialized &amp;pop)'],['../d9/dee/classKTfwd_1_1sugar_1_1singlepop__serialized.html#adfa6016b27f1c96613d0c721aa9d5bd0',1,'KTfwd::sugar::singlepop_serialized::singlepop_serialized(singlepop_serialized &amp;&amp;)=default'],['../de/d6e/group__sugar.html#gafef56c4bdf9f2932ce36edeeb3716847',1,'KTfwd::singlepop_serialized()']]],
  ['singlepop_5fserialized',['singlepop_serialized',['../d9/dee/classKTfwd_1_1sugar_1_1singlepop__serialized.html',1,'KTfwd::sugar']]],
  ['singlepop_5fsim',['SINGLEPOP_SIM',['../d3/d01/bneck__selection__ind_8cc.html#a31e3d5523df86ceef258de9a3e0ca01e',1,'SINGLEPOP_SIM():&#160;bneck_selection_ind.cc'],['../d3/da9/diploid__binaryIO__ind_8cc.html#a31e3d5523df86ceef258de9a3e0ca01e',1,'SINGLEPOP_SIM():&#160;diploid_binaryIO_ind.cc'],['../d8/d7e/diploid__fixed__sh__ind_8cc.html#a31e3d5523df86ceef258de9a3e0ca01e',1,'SINGLEPOP_SIM():&#160;diploid_fixed_sh_ind.cc'],['../df/d55/diploid__fixed__sh__ind__lambda_8cc.html#a31e3d5523df86ceef258de9a3e0ca01e',1,'SINGLEPOP_SIM():&#160;diploid_fixed_sh_ind_lambda.cc'],['../d0/d03/diploid__gzbinaryIO__ind_8cc.html#a31e3d5523df86ceef258de9a3e0ca01e',1,'SINGLEPOP_SIM():&#160;diploid_gzbinaryIO_ind.cc'],['../d9/de8/diploid__ind_8cc.html#a31e3d5523df86ceef258de9a3e0ca01e',1,'SINGLEPOP_SIM():&#160;diploid_ind.cc'],['../d5/d77/HOC__ind_8cc.html#a31e3d5523df86ceef258de9a3e0ca01e',1,'SINGLEPOP_SIM():&#160;HOC_ind.cc']]],
  ['singlepop_5ftag',['SINGLEPOP_TAG',['../de/d6e/group__sugar.html#ga1d1b3a08c798b89fea7c36a7180d8a0b',1,'KTfwd::sugar']]],
  ['site_5fdependent_5ffitness',['site_dependent_fitness',['../d0/ddb/structKTfwd_1_1site__dependent__fitness.html',1,'KTfwd']]],
  ['site_5fdependent_5ffitness2',['site_dependent_fitness2',['../da/d8b/namespaceKTfwd.html#a105a292a1e5c591d64d14caf4062e2f3',1,'KTfwd']]],
  ['sitedepfitness_2ecc',['siteDepFitness.cc',['../dd/d6c/siteDepFitness_8cc.html',1,'']]],
  ['smutations',['smutations',['../d6/d90/structKTfwd_1_1gamete__base.html#a76edcc938a527a8d21a5807dab2cb412',1,'KTfwd::gamete_base']]],
  ['standard',['standard',['../d3/dea/namespaceKTfwd_1_1tags.html#af816e12f7b8648716658bd3f7dbc5382ac00f0c4675b91fb8b918e4079a0b1bac',1,'KTfwd::tags']]],
  ['standard_5fgamete',['standard_gamete',['../d3/dea/namespaceKTfwd_1_1tags.html#a5d8bb8cb0ad58525e213bf7d6f529dee',1,'KTfwd::tags']]],
  ['stuff',['stuff',['../de/d89/structmut.html#aad643f6f2592d7caae0978571e1a7ef7',1,'mut']]],
  ['syntactic_20sugar_20layer',['Syntactic sugar layer',['../de/d6e/group__sugar.html',1,'']]],
  ['sugar_2emd',['sugar.md',['../df/df9/sugar_8md.html',1,'']]],
  ['sugar1_2ecc',['sugar1.cc',['../d0/db9/sugar1_8cc.html',1,'']]],
  ['sugar2_2ecc',['sugar2.cc',['../da/d50/sugar2_8cc.html',1,'']]],
  ['sugar3_2ecc',['sugar3.cc',['../de/d28/sugar3_8cc.html',1,'']]]
];
