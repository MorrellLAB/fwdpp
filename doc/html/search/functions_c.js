var searchData=
[
  ['sample_5fdiploid',['sample_diploid',['../da/d8b/namespaceKTfwd.html#a946efaa4a6095f4f2aadda44a809a477',1,'KTfwd::sample_diploid(gsl_rng *r, vector_type&lt; gamete_type, vector_type_allocator &gt; *gametes, const unsigned &amp;twoN, const diploid_fitness_function &amp;ff, const mutation_removal_policy &amp;mp, const double &amp;f=0.)'],['../da/d8b/namespaceKTfwd.html#a04a19140f729a493851685202d73c606',1,'KTfwd::sample_diploid(gsl_rng *r, vector_type&lt; gamete_type, vector_type_allocator &gt; *gametes, const unsigned &amp;twoN_curr, const unsigned &amp;twoN_next, const diploid_fitness_function &amp;ff, const mutation_removal_policy &amp;mp, const double &amp;f)'],['../da/d8b/namespaceKTfwd.html#ad49f95a9fb81ad6e735437d956f59ddb',1,'KTfwd::sample_diploid(gsl_rng *r, vector_type2&lt; vector_type1&lt; gamete_type, vector_type_allocator1 &gt;, vector_type_allocator2 &gt; *metapop, const unsigned *twoNs, const unsigned &amp;metapopsize, const diploid_fitness_function_container &amp;ffs, const mutation_removal_policy &amp;mp)'],['../da/d8b/namespaceKTfwd.html#a5647d600600d1e7c8254714c1b35d47f',1,'KTfwd::sample_diploid(gsl_rng *r, vector_type2&lt; vector_type1&lt; gamete_type, vector_type_allocator1 &gt;, vector_type_allocator2 &gt; *metapop, const unsigned *twoNs, const unsigned *twoNs_next, const unsigned &amp;metapopsize, const diploid_fitness_function_container &amp;ffs, const mutation_removal_policy &amp;mp)'],['../da/d8b/namespaceKTfwd.html#aa30567b5fe3c278ae72a9caaa744aaa2',1,'KTfwd::sample_diploid(gsl_rng *r, vector_type2&lt; vector_type1&lt; gamete_type, vector_type_allocator1 &gt;, vector_type_allocator2 &gt; *metapop, const unsigned *twoNs, const unsigned &amp;metapopsize, const diploid_fitness_function_container &amp;ffs, const mutation_removal_policy &amp;mp, const double *fs)'],['../da/d8b/namespaceKTfwd.html#adc37b4ba70df5adbced155f80d656029',1,'KTfwd::sample_diploid(gsl_rng *r, vector_type2&lt; vector_type1&lt; gamete_type, vector_type_allocator1 &gt;, vector_type_allocator2 &gt; *metapop, const unsigned *twoNs, const unsigned *twoNs_next, const unsigned &amp;metapopsize, const diploid_fitness_function_container &amp;ffs, const mutation_removal_policy &amp;mp, const double *fs)'],['../da/d8b/namespaceKTfwd.html#a761a0438d183384e5e8b49e89121d21e',1,'KTfwd::sample_diploid(gsl_rng *r, gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt; *gametes, diploid_vector_type&lt; std::pair&lt; typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator, typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator &gt;, diploid_vector_type_allocator &gt; *diploids, mutation_list_type&lt; typename gamete_type::mutation_type, mutation_list_type_allocator &gt; *mutations, const unsigned &amp;N_curr, const double &amp;mu, const mutation_model &amp;mmodel, const recombination_policy &amp;rec_pol, const mutation_insertion_policy &amp;mpolicy, const gamete_insertion_policy &amp;gpolicy_mut, const diploid_fitness_function &amp;ff, const mutation_removal_policy &amp;mp, const double &amp;f=0)'],['../da/d8b/namespaceKTfwd.html#a225d8aeed18091cd7ced5890f56afe52',1,'KTfwd::sample_diploid(gsl_rng *r, gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt; *gametes, diploid_vector_type&lt; std::pair&lt; typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator, typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator &gt;, diploid_vector_type_allocator &gt; *diploids, mutation_list_type&lt; typename gamete_type::mutation_type, mutation_list_type_allocator &gt; *mutations, const unsigned &amp;N_curr, const unsigned &amp;N_next, const double &amp;mu, const mutation_model &amp;mmodel, const recombination_policy &amp;rec_pol, const mutation_insertion_policy &amp;mpolicy, const gamete_insertion_policy &amp;gpolicy_mut, const diploid_fitness_function &amp;ff, const mutation_removal_policy &amp;mp, const double &amp;f=0)'],['../da/d8b/namespaceKTfwd.html#aaf1d8fa7c50cd8dadcceef879b13a2c5',1,'KTfwd::sample_diploid(gsl_rng *r, metapop_gamete_vector_type&lt; gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;, metapop_gamete_vector_type_allocator &gt; *metapop, metapop_diploid_vector_type&lt; diploid_vector_type&lt; std::pair&lt; typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator, typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator &gt;, diploid_vector_type_allocator &gt;, metapop_diploid_vector_type_allocator &gt; *diploids, mutation_list_type&lt; typename gamete_type::mutation_type, mutation_list_type_allocator &gt; *mutations, const unsigned *N_curr, const double &amp;mu, const mutation_model &amp;mmodel, const recombination_policy &amp;rec_pol, const mutation_insertion_policy &amp;mpolicy, const gamete_insertion_policy &amp;gpolicy_mut, const diploid_fitness_function_container &amp;ffs, const mutation_removal_policy &amp;mp, const migration_policy &amp;mig, const double *f=NULL)'],['../da/d8b/namespaceKTfwd.html#a9d97cd41a47a5e01dd034b94e16f49f2',1,'KTfwd::sample_diploid(gsl_rng *r, metapop_gamete_vector_type&lt; gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;, metapop_gamete_vector_type_allocator &gt; *metapop, metapop_diploid_vector_type&lt; diploid_vector_type&lt; std::pair&lt; typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator, typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator &gt;, diploid_vector_type_allocator &gt;, metapop_diploid_vector_type_allocator &gt; *diploids, mutation_list_type&lt; typename gamete_type::mutation_type, mutation_list_type_allocator &gt; *mutations, const unsigned *N_curr, const unsigned *N_next, const double &amp;mu, const mutation_model &amp;mmodel, const recombination_policy &amp;rec_pol, const mutation_insertion_policy &amp;mpolicy, const gamete_insertion_policy &amp;gpolicy_mut, const diploid_fitness_function_container &amp;ffs, const mutation_removal_policy &amp;mp, const migration_policy &amp;mig, const double *f=NULL)'],['../da/d8b/namespaceKTfwd.html#ade94ef65f07d1e664a19f20d2582728d',1,'KTfwd::sample_diploid(gsl_rng *r, glist_vector_type&lt; gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;, glist_vector_type_allocator &gt; *gametes, diploid_vector_type&lt; locus_vector_type&lt; std::pair&lt; typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator, typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator &gt;, locus_vector_type_allocator &gt;, diploid_vector_type_allocator &gt; *diploids, mutation_list_type&lt; typename gamete_type::mutation_type, mutation_list_type_allocator &gt; *mutations, const unsigned &amp;N_curr, const unsigned &amp;N_next, const double *mu, const mutation_model_container &amp;mmodel, const recombination_policy_container &amp;rec_policies, const double *r_between_loci, const mutation_insertion_policy &amp;mpolicy, const gamete_insertion_policy &amp;gpolicy_mut, const diploid_fitness_function &amp;ff, const mutation_removal_policy &amp;mp, const double &amp;f)'],['../da/d8b/namespaceKTfwd.html#aaa6b4b4c12ce030e4bd1f32a0cd95b3c',1,'KTfwd::sample_diploid(gsl_rng *r, glist_vector_type&lt; gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;, glist_vector_type_allocator &gt; *gametes, diploid_vector_type&lt; locus_vector_type&lt; std::pair&lt; typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator, typename gamete_list_type&lt; gamete_type, gamete_list_type_allocator &gt;::iterator &gt;, locus_vector_type_allocator &gt;, diploid_vector_type_allocator &gt; *diploids, mutation_list_type&lt; typename gamete_type::mutation_type, mutation_list_type_allocator &gt; *mutations, const unsigned &amp;N, const double *mu, const mutation_model_container &amp;mmodel, const recombination_policy_container &amp;rec_policies, const double *r_between_loci, const mutation_insertion_policy &amp;mpolicy, const gamete_insertion_policy &amp;gpolicy_mut, const diploid_fitness_function &amp;ff, const mutation_removal_policy &amp;mp, const double &amp;f)']]],
  ['sample_5fsfs',['sample_sfs',['../da/d8b/namespaceKTfwd.html#ad9a8a0218ff1f5dfc33268fd5243207b',1,'KTfwd']]],
  ['setup1',['setup1',['../d9/d1d/mlocusCrossoverTest_8cc.html#a52ed2176e17b75d6e31dcc9bdd41de78',1,'mlocusCrossoverTest.cc']]],
  ['setup2',['setup2',['../d9/d1d/mlocusCrossoverTest_8cc.html#a9568faa7157dd456dd1fead0e071ec12',1,'mlocusCrossoverTest.cc']]],
  ['site_5fdependent_5ffitness2',['site_dependent_fitness2',['../da/d8b/namespaceKTfwd.html#a105a292a1e5c591d64d14caf4062e2f3',1,'KTfwd']]]
];
